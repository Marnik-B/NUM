
import numpy as np
import matplotlib.pyplot as plt

# Parameters
N = 300
alpha = 0.7
beta = 0.4
dt = 0.1

M0=1
S0=N-M0
G0=0
t=0
Y0=np.array([[S0],
            [G0],
            [M0]])

A = np.array([[-alpha,0,0],
              [0,0,beta],
              [alpha,0,-beta]])


def F(Y):
    return A@Y
    

# Euler
def euler(Y):
    M = np.array([1])
    S = np.array([N - M[0]])
    G = np.array([0])
    t = np.array([0])

    while Y[2][-1] >= 0.01:
        Y_next=Y+dt*F(Y)
        Y=Y_next
        t_next = t[-1] + dt

        S=np.append(S,Y[0])
        G=np.append(G,Y[1])
        M=np.append(M,Y[2])
        t=np.append(t,t_next)

    return t, S, M, G

# RK2
def rk2(Y):
    M = np.array([1])
    S = np.array([N - M[0]])
    G = np.array([0])
    t = np.array([0])

    while Y[2][-1] >= 0.01:
        Y_next=Y+dt*F(Y+dt/2*F(Y))
        Y=Y_next
        
        
        t_next = t[-1] + dt


        S=np.append(S,Y[0])
        G=np.append(G,Y[1])
        M=np.append(M,Y[2])
        t=np.append(t,t_next)

    return t,S,M,G

t_e, S_e, M_e, G_e = euler(Y0)
t_rk, S_rk, M_rk, G_rk = rk2(Y0)

dt = 0.5

t_e2, S_e2, M_e2, G_e2 = euler(Y0)
t_rk2, S_rk2, M_rk2, G_rk2 = rk2(Y0)


dt = 1

t_e3, S_e3, M_e3, G_e3 = euler(Y0)
t_rk3, S_rk3, M_rk3, G_rk3 = rk2(Y0)


fig, (axm,axg,axs) = plt.subplots(1,3,figsize = (15,4))
axm.plot(t_e, M_e, label="Malades (Euler)", linestyle="--")
axm.plot(t_rk, M_rk, label="Malades (RK2)", linestyle="-")
axm.set_title("Malades Euler vs RK2 pour dt = 0.1")
axm.set_xlabel("Temps (jours)")
axm.set_ylabel("Nombre de malades")
axm.set_ylim(0, 250)
axm.legend()
axm.grid()

axg.plot(t_e2, M_e2, label="Malades (Euler)", linestyle="--")
axg.plot(t_rk2, M_rk2, label="Malades (RK2)", linestyle="-")
axg.set_title("Malades Euler vs RK2 pour dt = 0.5")
axg.set_xlabel("Temps (jours)")
axg.set_ylabel("Nombre de malades")
axg.set_ylim(0, 250)
axg.legend()
axg.grid()


axs.plot(t_e3, M_e3, label="Malades (Euler)", linestyle="--")
axs.plot(t_rk3, M_rk3, label="Malades (RK2)", linestyle="-")
axs.set_title("Malades Euler vs RK2 pour dt = 1")
axs.set_xlabel("Temps (jours)")
axs.set_ylabel("Nombre de malades")
axs.set_ylim(0, 250)
axs.legend()

axs.grid()





# axg.plot(t_e, G_e, label="Guéris (Euler)", linestyle="--")
# axg.plot(t_rk, G_rk, label="Guéris (RK2)", linestyle="-")
# axg.set_title("Guéris Euler vs RK2")
# axg.set_xlabel("Temps (jours)")
# axg.set_ylabel("Nombre de guéris")
# axg.legend()
# axg.grid()

# axs.plot(t_e, S_e, label="Sains (Euler)", linestyle="--")
# axs.plot(t_rk, S_rk, label="Sains (RK2)", linestyle="-")
# axs.set_title("Sains Euler vs RK2")
# axs.set_xlabel("Temps (jours)")
# axs.set_ylabel("Nombre de sains")
# axs.legend()
# axs.grid()

plt.show()

# Résultats
print("Résultats RK2:")
print(f"Pic de l'épidémie à t = {t_rk[np.argmax(M_rk)]} jours")
print(f"Fin de l'épidémie à t = {t_rk[-1]} jours")
print(f"Total infectés: {int(G_rk[-1] + M_rk[-1])}")

print("\nRésultats Euler:")
print(f"Pic de l'épidémie à t = {t_e[np.argmax(M_e)]} jours")
print(f"Fin de l'épidémie à t = {t_e[-1]} jours")
print(f"Total infectés: {int(G_e[-1] + M_e[-1])}")
