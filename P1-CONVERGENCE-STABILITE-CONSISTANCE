import numpy as np
import matplotlib.pyplot as plt

# Parameters
N = 300
alpha = 0.7
beta = 0.4
dt = 0.1   #1.81 limite

M0=1
S0=N-M0
G0=0
t=0
Y0=np.array([[S0],
            [G0],
            [M0]])

def F(Y):
    A = np.array([[-alpha,0,0],
                  [0,0,beta],
                  [alpha,0,-beta]])
    return A@Y

# Euler
def euler(Y):
    M = np.array([1])
    S = np.array([N - M[0]])
    G = np.array([0])
    t = np.array([0])
    N_tot=np.array([300])

    while Y[2][-1] >= 0.01:
        Y_next=Y+dt*F(Y)
        Y=Y_next
        t_next = t[-1] + dt

        S=np.append(S,Y[0])
        G=np.append(G,Y[1])
        M=np.append(M,Y[2])
        t=np.append(t,t_next)
        N_tot=np.append(N_tot,abs(Y[0])+abs(Y[1])+abs(Y[2]))
        
        

    return t, S, M, G, N_tot

# RK2
def rk2(Y):
    M = np.array([1])
    S = np.array([N - M[0]])
    G = np.array([0])
    t = np.array([0])
    N_tot=np.array([300])
    

    while Y[2][-1] >= 0.01:
        Y_next=Y+dt*F(Y+dt/2*F(Y))
        Y=Y_next
        
        
        t_next = t[-1] + dt


        S=np.append(S,Y[0])
        G=np.append(G,Y[1])
        M=np.append(M,Y[2])
        t=np.append(t,t_next)
        N_tot=np.append(N_tot,abs(Y[0])+abs(Y[1])+abs(Y[2]))

    return t,S,M,G,N_tot

def theta_schema (Y, theta):
    M = np.array([1])
    S = np.array([N - M[0]])
    G = np.array([0])
    t = np.array([0])
    N_tot=np.array([300])
    
    while Y[2][-1] >= 0.01:
        Y_next = Y + dt*((1-theta)*F(Y)+theta*F(Y+dt/2*F(Y)))
        Y=Y_next
        t_next = t[-1] + dt
        S=np.append(S,Y[0])
        G=np.append(G,Y[1])
        M=np.append(M,Y[2])
        t=np.append(t,t_next)
        N_tot=np.append(N_tot,abs(Y[0])+abs(Y[1])+abs(Y[2]))
        
    return t,S,M,G, N_tot  
    
theta = 0.5

t_e, S_e, M_e, G_e, N_e = euler(Y0)
t_rk, S_rk, M_rk, G_rk, N_rk = rk2(Y0)
t_th, S_th, M_th, G_th, N_th= theta_schema(Y0, theta)



fig, (axm,axg,axs) = plt.subplots(1,3,figsize = (15,4))
axm.plot(t_e, M_e, label="Malades (Euler)", linestyle="--")
axm.plot(t_rk, M_rk, label="Malades (RK2)", linestyle="-")
axm.plot(t_th, M_th, label="Malades (Theta)", linestyle=":")
axm.set_title("Malades Euler vs RK2")
axm.set_xlabel("Temps (jours)")
axm.set_ylabel("Nombre de malades")
axm.legend()
axm.grid()

axg.plot(t_e, G_e, label="Guéris (Euler)", linestyle="--")
axg.plot(t_rk, G_rk, label="Guéris (RK2)", linestyle="-")
axg.plot(t_th, G_th, label="Guéris (Theta)", linestyle=":")
axg.set_title("Guéris Euler vs RK2")
axg.set_xlabel("Temps (jours)")
axg.set_ylabel("Nombre de guéris")
axg.legend()
axg.grid()

axs.plot(t_e, S_e, label="Sains (Euler)", linestyle="--")
axs.plot(t_rk, S_rk, label="Sains (RK2)", linestyle="-")
axs.plot(t_th, S_th, label="Sains (Theta)", linestyle=":")
axs.set_title("Sains Euler vs RK2")
axs.set_xlabel("Temps (jours)")
axs.set_ylabel("Nombre de sains")
axs.legend()
axs.grid()
plt.show()


# Total population over time for each method
total_euler = S_e + M_e + G_e
total_rk2 = S_rk + M_rk + G_rk

plt.figure(figsize=(10, 6))
plt.plot(t_e, N_e, label='Euler: S+M+G', linestyle='--')
plt.plot(t_rk, N_rk, label='RK2: S+M+G', linestyle='-')
plt.plot(t_th, N_th, label='Theta: S+M+G', linestyle='-')
plt.xlabel("Temps (jours)")
plt.ylabel("Population totale (S+M+G)")
plt.ylim(0,500)
plt.title("Évolution de S+M+G au cours du temps")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()



# Résultats
print("Résultats RK2:")
print(f"Pic de l'épidémie à t = {t_rk[np.argmax(M_rk)]} jours, avec {M_rk[np.argmax(M_rk)]} malades")
print(f"Fin de l'épidémie à t = {t_rk[-1]} jours")
print(f"Total infectés: {int(G_rk[-1] + M_rk[-1])}")

print("\nRésultats Euler:")
print(f"Pic de l'épidémie à t = {t_e[np.argmax(M_e)]} jours, avec {M_e[np.argmax(M_e)]} malades")
print(f"Fin de l'épidémie à t = {t_e[-1]} jours")
print(f"Total infectés: {int(G_e[-1] + M_e[-1])}")

